{"version":3,"sources":["components/Pad.js","components/Controller.js","globalAudio.js","components/Pads.js","App.js","reportWebVitals.js","index.js"],"names":["Pad","object","onPadClicked","Button","className","clicked","size","value","name","style","width","height","borderRadius","margin","onClick","event","Controller","onPlayClick","onStopClick","onResetClick","onRecordClick","isRecording","Row","Col","sm","title","variant","audios","Bass","Audio","Tanggu","Electric","Future","Maze","Pas","Silent","Stompy","Stutter","currentTime","pause","play","Pads","useState","wait","sounds","setSounds","globalAudio","currentAudio","setCurrentAudio","playing","setPlaying","delay","setDelay","setIsRecording","useEffect","audio","forEach","obj","addEventListener","handleLoop","error","console","message","removeEventListener","handlePadClick","e","currentName","target","newSoundsArray","log","newResetSoundArray","prevState","slice","map","length","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45f8e183.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { MusicNoteBeamed } from \"react-bootstrap-icons\";\r\n\r\nconst Pad = ({ object, onPadClicked }) => {\r\n  return (\r\n    <Button\r\n      className={`${object.clicked === true ? \"btn-primary\" : \"btn-secondary\"}`}\r\n      size=\"lg\"\r\n      value={object.name}\r\n      style={{\r\n        width: 100,\r\n        height: 100,\r\n        borderRadius: 50,\r\n        margin: \"10px\",\r\n      }}\r\n      onClick={(event) => onPadClicked(event)}\r\n    >\r\n      {object.name}\r\n      <br />\r\n      <MusicNoteBeamed />\r\n    </Button>\r\n  );\r\n};\r\n\r\nPad.propTypes = {\r\n  object: PropTypes.object.isRequired,\r\n  onPadClicked: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pad;\r\n","import React from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  CaretRight,\r\n  Stop,\r\n  Trash2,\r\n  RecordCircle,\r\n  PauseCircle,\r\n} from \"react-bootstrap-icons\";\r\n\r\nconst Controller = ({\r\n  onPlayClick,\r\n  onStopClick,\r\n  onResetClick,\r\n  onRecordClick,\r\n  isRecording,\r\n}) => {\r\n  return (\r\n    <Row>\r\n      <Col sm={10}>\r\n        <Button\r\n          title=\"Play\"\r\n          variant=\"success\"\r\n          size=\"lg\"\r\n          style={{ margin: \"10px\" }}\r\n          onClick={onPlayClick}\r\n        >\r\n          Play\r\n          <CaretRight />\r\n        </Button>\r\n        <Button\r\n          title=\"Stop\"\r\n          variant=\"danger\"\r\n          size=\"lg\"\r\n          style={{ margin: \"10px\" }}\r\n          onClick={onStopClick}\r\n        >\r\n          Stop\r\n          <Stop />\r\n        </Button>\r\n        <Button\r\n          title=\"Reset\"\r\n          variant=\"warning\"\r\n          size=\"lg\"\r\n          style={{ margin: \"10px\" }}\r\n          onClick={onResetClick}\r\n        >\r\n          Reset\r\n          <Trash2 />\r\n        </Button>\r\n      </Col>\r\n      <Col sm={2}>\r\n        {!isRecording ? (\r\n          <Button\r\n            title=\"Record\"\r\n            variant=\"outline-danger\"\r\n            size=\"lg\"\r\n            style={{\r\n              width: 50,\r\n              height: 50,\r\n              borderRadius: 50,\r\n            }}\r\n            onClick={onRecordClick}\r\n          >\r\n            <RecordCircle />\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            title=\"Stop recording\"\r\n            variant=\"outline-danger\"\r\n            size=\"lg\"\r\n            style={{\r\n              width: 50,\r\n              height: 50,\r\n              borderRadius: 50,\r\n            }}\r\n            onClick={onRecordClick}\r\n          >\r\n            <PauseCircle />\r\n          </Button>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nController.propTypes = {\r\n  onPlayClick: PropTypes.func.isRequired,\r\n  onStopClick: PropTypes.func.isRequired,\r\n  onResetClick: PropTypes.func.isRequired,\r\n  onRecordClick: PropTypes.func.isRequired,\r\n  isRecording: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Controller;\r\n","const audios = {\r\n  Bass: new Audio(\"./sounds/Bass.mp3\"),\r\n  Tanggu: new Audio(\"./sounds/Tanggu.mp3\"),\r\n  Electric: new Audio(\"./sounds/Electric.mp3\"),\r\n  Future: new Audio(\"./sounds/Future.mp3\"),\r\n  Maze: new Audio(\"./sounds/Maze.mp3\"),\r\n  Pas: new Audio(\"./sounds/Pas.mp3\"),\r\n  Silent: new Audio(\"./sounds/Silent.mp3\"),\r\n  Stompy: new Audio(\"./sounds/Stompy.mp3\"),\r\n  Stutter: new Audio(\"./sounds/Stutter.mp3\"),\r\n};\r\n\r\nconst play = (name) => {\r\n  audios[name].play();\r\n  //   audios[name].loop = true;\r\n};\r\n\r\nconst pause = (name) => {\r\n  audios[name].currentTime = 0;\r\n  audios[name].pause();\r\n};\r\n\r\nconst audio = (name) => {\r\n  return audios[name];\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  pause,\r\n  play,\r\n  audio,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Pad from \"./Pad\";\r\nimport Controller from \"./Controller\";\r\nimport globalAudio from \"../globalAudio\";\r\n\r\nimport { Col, Row } from \"react-bootstrap\";\r\n\r\nconst Pads = () => {\r\n  const [sounds, setSounds] = useState([\r\n    {\r\n      name: \"Bass\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Tanggu\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Electric\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Future\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Maze\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Pas\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Silent\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Stompy\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n    {\r\n      name: \"Stutter\",\r\n      clicked: false,\r\n      wait: false,\r\n    },\r\n  ]);\r\n  //contains the audio element of the first pad which has been clicked\r\n  const [currentAudio, setCurrentAudio] = useState(\r\n    globalAudio.audio(sounds[0].name)\r\n  );\r\n  // playing states is \"true\" if 'play' has clicked or \"false\" otherwise\r\n  const [playing, setPlaying] = useState(false);\r\n  // state that help to control the synce between loops\r\n  const [delay, setDelay] = useState(true);\r\n  // handle recording data\r\n  const [isRecording, setIsRecording] = useState(false);\r\n\r\n  useEffect(() => {\r\n    var audio;\r\n    playing === true\r\n      ? // if the button 'play' is clicked - play all pads which has been clicked at the beginning\r\n        sounds.forEach((obj) => {\r\n          // if the pad has been clicked before the 'play' button is on (no need to sync)\r\n          if (obj.clicked === true && obj.wait === false) {\r\n            try {\r\n              audio = globalAudio.audio(obj.name);\r\n              setCurrentAudio(audio);\r\n              globalAudio.play(obj.name); // play this audio element\r\n              currentAudio.addEventListener(\"ended\", () => {\r\n                handleLoop(audio);\r\n                setDelay(true);\r\n              });\r\n            } catch (error) {\r\n              console.error(error.message);\r\n            }\r\n          }\r\n          // handling the delay if a pad was clicked after the 'play' was clicked\r\n          if (obj.clicked === true && obj.wait === true) {\r\n            if (delay === false) {\r\n              setDelay(true);\r\n              handleLoop(globalAudio.audio(obj.name));\r\n              obj.wait = false;\r\n            }\r\n          }\r\n        })\r\n      : // if the button stop has clicked -> stop all pads\r\n        sounds.forEach((obj) => {\r\n          globalAudio.pause(obj.name);\r\n          obj.wait = false;\r\n        });\r\n\r\n    return () => {\r\n      currentAudio.removeEventListener(\"ended\", () => handleLoop(audio));\r\n    };\r\n  }, [playing, sounds, delay, currentAudio]);\r\n\r\n  // function that make loop for each pad which has been clicked\r\n  const handleLoop = (audio) => {\r\n    audio.currentTime = 0;\r\n    setDelay(false);\r\n    audio.play();\r\n  };\r\n\r\n  const handlePadClick = (e) => {\r\n    const currentName = e.target.value; // the name of the audio which has clicked\r\n    var newSoundsArray = [];\r\n    sounds.forEach((obj) => {\r\n      if (obj.name === currentName) {\r\n        // will pause the track if its pad was clicked to false before the 'stop' btn has clicked\r\n        if (obj.clicked === true) {\r\n          globalAudio.pause(currentName);\r\n          obj.wait = false;\r\n        }\r\n        if (playing === true) {\r\n          obj.wait = true;\r\n        }\r\n        // updates new state of the \"clicked\" status\r\n        newSoundsArray = [\r\n          ...newSoundsArray,\r\n          {\r\n            name: currentName,\r\n            clicked: !obj.clicked, // updating the status of the pad\r\n            wait: playing ? true : false, // handeling the synced start\r\n          },\r\n        ];\r\n      } else {\r\n        newSoundsArray = [...newSoundsArray, obj];\r\n      }\r\n    });\r\n    setSounds(newSoundsArray);\r\n  };\r\n\r\n  const handlePlayClicked = () => {\r\n    console.log(\"Play clicked\");\r\n    setPlaying(true);\r\n  };\r\n\r\n  const handleStopClicked = () => {\r\n    if (playing === true) {\r\n      console.log(\"Stop clicked\");\r\n      setPlaying(false);\r\n    }\r\n  };\r\n\r\n  const handleResetClicked = () => {\r\n    console.log(\"Reset clicked\");\r\n    setPlaying(false);\r\n    var newResetSoundArray = [];\r\n    sounds.forEach((obj) => {\r\n      newResetSoundArray = [\r\n        ...newResetSoundArray,\r\n        {\r\n          name: obj.name,\r\n          clicked: false,\r\n          wait: false,\r\n        },\r\n      ];\r\n    });\r\n    setSounds(newResetSoundArray);\r\n  };\r\n\r\n  const handleRecordClicked = () => {\r\n    console.log(\"Record clicked\");\r\n    setIsRecording((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"controllers\">\r\n        <Controller\r\n          onPlayClick={handlePlayClicked}\r\n          onStopClick={handleStopClicked}\r\n          onResetClick={handleResetClicked}\r\n          onRecordClick={handleRecordClicked}\r\n          isRecording={isRecording}\r\n        />\r\n      </Row>\r\n      <Row>\r\n        {sounds.slice(0, 3).map((obj) => {\r\n          return (\r\n            <Col key={obj.name}>\r\n              <Pad className=\"pad\" object={obj} onPadClicked={handlePadClick} />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n      <Row>\r\n        {sounds.slice(3, 6).map((obj) => {\r\n          return (\r\n            <Col key={obj.name}>\r\n              <Pad className=\"pad\" object={obj} onPadClicked={handlePadClick} />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n      <Row>\r\n        {sounds.slice(6, sounds.length).map((obj) => {\r\n          return (\r\n            <Col key={obj.name}>\r\n              <Pad className=\"pad\" object={obj} onPadClicked={handlePadClick} />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pads;\r\n","import Pads from \"./components/Pads\";\nimport { Container } from \"react-bootstrap\";\nconst App = () => {\n  return (\n    <Container className=\"machine\">\n      <Pads />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}